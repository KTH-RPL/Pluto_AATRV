<launch>
    <!-- ================================================================== -->
    <!-- Original Obstacle Detector Node -->
    <!-- ================================================================== -->
    <node name="detector" pkg="detector" type="detector.py" output="screen">
        <!-- ... (detector parameters are unchanged) ... -->
        <param name="depth_topic"           value="/rsD455_node0/depth/image_rect_raw"/>
        <param name="obstacle_topic"        value="/detected_obstacles"/>
        <param name="output_frame_id"       value="base_link"/>
        <param name="safety_buffer"         value="0.1"/>
        <param name="depth_scale_factor"    value="1000.0"/>
        <rosparam param="uv_detector">
            row_downsample: 4
            col_scale: 0.5
            min_dist: 0.1
            max_dist: 8.0
            threshold_point: 3
            threshold_line: 2
            min_length_line: 6
        </rosparam>
        <rosparam param="depth_intrinsics">[392.1868, 393.0597, 323.7744, 236.8676]</rosparam>
        <rosparam param="body_to_camera_depth">[
            -0.002257, -0.000971,  0.999996,  0.068483,
             0.999962,  0.008356,  0.002265, -0.054542,
            -0.008358,  0.999964,  0.000952,  0.094245,
             0.0,       0.0,       0.0,       1.0
        ]</rosparam>
    </node>

    <!-- ================================================================== -->
    <!-- UPDATED: Costmap Generator Node with Gradient Inflation -->
    <!-- ================================================================== -->
    <node name="costmap_generator" pkg="detector" type="costmap_trial.py" output="screen">
        <!-- Input/Output Topics -->
        <param name="obstacle_topic" value="/detected_obstacles"/>
        <param name="costmap_topic"  value="/local_costmap"/>
        
        <!-- Frame ID for the costmap -->
        <param name="map_frame"      value="base_link"/>

        <!-- Costmap Dimensions -->
        <param name="map_size"       value="20.0"/> <!-- meters -->
        <param name="resolution"     value="0.1"/>  <!-- meters per cell -->

        <!-- Inflation and Gradient Parameters -->
        <!-- Cost is 100 (max) from the obstacle edge out to this distance -->
        <param name="inflation_radius"    value="0.7"/> <!-- meters (matches robot radius) -->
        <!-- Cost linearly decreases from 100 to 0 between inflation_radius and this distance -->
        <param name="gradient_end_radius" value="1.2"/> <!-- meters -->
        <!-- The maximum cost value to assign (standard is 100 for OccupancyGrid) -->
        <param name="max_cost"            value="100"/>
    </node>

    <!-- ================================================================== -->
    <!-- RViz Visualization -->
    <!-- ================================================================== -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find detector)/src/rviz.rviz" required="true"/>
</launch>